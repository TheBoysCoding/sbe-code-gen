{#-
    Copyright (C) 2022 Sergey Kovalevich <inndie@gmail.com>
    This file may be distributed under the terms of the GNU GPLv3 license
-#}

{% extends 'document.tmpl' %}

{% block content %}

{%- set type_class_name = type.name | format_class_name -%}
{%- set underlying_type = type.encodingType | replace_keyword -%}

class {{ type_class_name }} final {
private:
    {{ underlying_type }} value_;

public:
    enum enumerated : {{ underlying_type }} {
{% for validValue in type.validValues %}
    {% if type.encodingType == 'char' %}
        {{ validValue.name }} = '{{ validValue.value }}',
    {% else %}
        {{ validValue.name }} = {{ validValue.value }},
    {% endif %}
{% endfor %}
        NULL_VALUE = {{ type.nullValue | replace_keyword }}
    };

    constexpr {{ type_class_name }}() noexcept
        : {{ type_class_name }}(enumerated::NULL_VALUE)
    {}

    constexpr {{ type_class_name }}(enumerated value) noexcept
        : value_(value)
    {}

    explicit constexpr {{ type_class_name }}({{underlying_type}} value) noexcept
        : value_(value)
    {}

    [[nodiscard]] constexpr operator enumerated() const noexcept {
        return enumerated(value_);
    }

    [[nodiscard]] static constexpr char const* toString({{ type_class_name }} value) noexcept {
        switch (value) {
{% for validValue in type.validValues %}
            case {{ type_class_name }}::{{ validValue.name }}:
                return "{{ validValue.name }}";
{% endfor %}
            default:
                break;
        }
        return "";
    }

    [[nodiscard]] static constexpr {{ type_class_name }} fromString(char const* value) noexcept {
        using namespace std::string_view_literals;
{% for validValue in type.validValues %}
        if ("{{ validValue.name }}"sv == value) {
            return {{ type_class_name }}::{{ validValue.name }};
        }
{% endfor %}
        return NULL_VALUE;
    }

    [[nodiscard]] friend constexpr auto operator<=>({{ type_class_name }} const& a, {{ type_class_name }} const& b) noexcept {
        return a.value_ <=> b.value_;
    };
};

{% endblock %}
