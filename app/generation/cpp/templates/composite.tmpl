{#-
    Copyright (C) 2022 Sergey Kovalevich <inndie@gmail.com>
    This file may be distributed under the terms of the GNU GPLv3 license
-#}

{% extends 'document.tmpl' %}

{% import 'method.tmpl' as method %}
{% import 'meta.tmpl' as meta %}

{% block content %}

{%- set composite_class_name = type.name | format_class_name -%}

class {{ composite_class_name }} final {
private:
    char* buffer_ = nullptr;
    std::size_t bufferLength_ = 0;
    std::size_t offset_ = 0;
    std::uint16_t actingVersion_ = 0;

public:
    {{ composite_class_name }}() = default;

    {{ composite_class_name }}(char* buffer, std::size_t offset, std::size_t bufferLength,
            std::uint16_t actingVersion)
        : buffer_(buffer)
        , bufferLength_(bufferLength)
        , offset_(offset)
        , actingVersion_(actingVersion)
    {
        if ((offset_ + encodedLength()) > bufferLength_) [[unlikely]] {
            throw std::runtime_error("buffer too short for flyweight {{ type.name }} [E107]");
        }
    }

    {{ composite_class_name }}(char* buffer, std::size_t bufferLength, std::uint16_t actingVersion)
        : {{ composite_class_name }}(buffer, 0, bufferLength, actingVersion)
    {}

    {{ composite_class_name }}(char* buffer, std::size_t bufferLength)
        : {{ composite_class_name }}(buffer, 0, bufferLength, sbeSchemaVersion())
    {}

    {{ composite_class_name }}& wrap(char* buffer, std::size_t offset, std::uint16_t actingVersion,
            std::size_t bufferLength) {
        return *this = {{ composite_class_name }}(buffer, offset, bufferLength, actingVersion);
    }

    [[nodiscard]] static constexpr std::size_t encodedLength() noexcept {
        return {{ type.encodedLength }};
    }

    [[nodiscard]] std::size_t offset() const noexcept {
        return offset_;
    }

    [[nodiscard]] char const* buffer() const noexcept {
        return buffer_;
    }

    [[nodiscard]] char* buffer() noexcept {
        return buffer_;
    }

    [[nodiscard]] std::size_t bufferLength() const noexcept {
        return bufferLength_;
    }

    [[nodiscard]] std::uint16_t actingVersion() const noexcept {
        return actingVersion_;
    }

    [[nodiscard]] static constexpr std::uint16_t sbeSchemaId() noexcept {
        return {{ schema.id }};
    }

    [[nodiscard]] static constexpr std::uint16_t sbeSchemaVersion() noexcept {
        return {{ schema.version }};
    }

{% for containedType in type.containedTypes %}
    {{ method.define_property(composite_class_name, containedType) | indent }}
{% endfor %}

    {{ meta.define_meta(composite_class_name, type.containedTypes) | indent }}
};

{% endblock %}
