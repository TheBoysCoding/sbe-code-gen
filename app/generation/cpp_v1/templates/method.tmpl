{% macro generate(class_name, entry) %}
{%- if entry.token == 'type' %}
    {{- generate_type(class_name, entry) }}
{%- elif entry.token == 'composite' %}
    {{- generate_composite(class_name, entry) }}
{%- elif entry.token == 'enum' %}
    {{- generate_enum(class_name, entry) }}
{%- elif entry.token == 'set' %}
    {{- generate_set(class_name, entry) }}
{%- elif entry.token == 'field' %}
    {%- if entry.type.token == 'type' %}
        {{- generate_type(class_name, entry) }}
    {%- elif entry.type.token == 'composite' %}
        {{- generate_composite(class_name, entry) }}
    {%- elif entry.type.token == 'enum' %}
        {{- generate_enum(class_name, entry) }}
    {%- elif entry.type.token == 'set' %}
        {{- generate_set(class_name, entry) }}
    {%- endif %}
{%- elif entry.token == 'group' %}
    {{- generate_group(class_name, entry) }}
{%- elif entry.token == 'data' %}
    {{- generate_data(class_name, entry) }}
{%- endif %}
{% endmacro %}

{% macro generate_type(class_name, entry) -%}
{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}

{%- if type.length == 1 %}
    {{- generate_type_single(class_name, entry) }}
{%- elif type.length > 1 %}
    {{- generate_type_array(class_name, entry) }}
{%- endif %}
{%- endmacro %}

{% macro generate_type_single(class_name, entry) %}

{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}
{%- set method_name = entry.name -%}
{%- set underlying_type = type.primitiveType | cpp -%}

{%- if entry.presence == 'constant' %}
[[nodiscard]] static constexpr {{ underlying_type }} {{ method_name | format_method_name_get }}() noexcept {
    {% if type.primitiveType == 'char' %}
    return '{{ type.constValue }}';
    {% else %}
    return {{ type.constValue }};
    {% endif %}
}
{%- endif %}

{%- if entry.presence == 'required' or entry.presence == 'optional' %}
[[nodiscard]] {{ underlying_type }} {{ method_name | format_method_name_get }}() const noexcept {
    return *std::bit_cast<{{ underlying_type }} const*>(buffer_ + offset_ + {{ entry.offset }});
}

{% endif %}

{%- if entry.presence != 'constant' %}
{{ class_name }}& {{ method_name | format_method_name_get }}({{ underlying_type }} value) noexcept {
    *std::bit_cast<{{ underlying_type }}*>(buffer_ + offset_ + {{ entry.offset }}) = value;
    return *this;
}

{% endif %}

{%- if entry.presence == 'optional' %}
{{ class_name }}& {{ method_name | format_method_name_reset }}() noexcept {
    return {{ method_name | format_method_name_set }}({{ type.nullValue | cpp}});
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'constant' %}
[[nodiscard]] static constexpr bool {{ method_name | format_method_name_is_present }}() noexcept {
    return true;
}
{% endif %}

{%- if entry.presence == 'optional' %}
[[nodiscard]] bool {{ method_name | format_method_name_is_present }}() const noexcept {
    return {{ type.nullValue | cpp }} != {{ method_name | format_method_name_get }}();
}
{% endif %}
{% endmacro %}

{% macro generate_type_array(class_name, entry) %}

{%- if entry.token == 'field' %}
    {%- set type = entry.type -%}
{%- else %}
    {%- set type = entry -%}
{%- endif %}
{%- set method_name = entry.name -%}
{%- set underlying_type = type.primitiveType | cpp -%}
{%- if type.primitiveType == 'char' %}
    {% set value_type = 'std::string_view' -%}
{%- else %}
    {% set value_type = 'std::span<' ~ underlying_type ~ ' const>' -%}
{%- endif %}

{%- if entry.presence == 'constant' %}
[[nodiscard]] static constexpr {{ value_type }} {{ method_name | format_method_name_get }}() noexcept {
    {% if type.primitiveType == 'char' %}
    return "{{ type.constValue }}";
    {% else %}
    assert(false, "not implemeted");
    {% endif %}
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'optional' %}
[[nodiscard]] {{ value_type }} {{ method_name | format_method_name_get }}() const noexcept {
    return {{ value_type }}(std::bit_cast<{{ underlying_type }} const*>(buffer_ + offset_ + {{ entry.offset }}), {{ type.length }});
}

{% endif %}

{%- if entry.presence != 'constant' and type.primitiveType != 'char' %}
{{ class_name }}& {{ method_name | format_method_name_get }}({{ value_type }} value) noexcept {
    if (value.size() != {{ type.length }}) [[unlikely]] {
        # TODO
        throw std::runtime_error("...");
    }
    std::memcpy(buffer_ + offset_ + {{ entry.offset }}, value.data(), {{ underlying_type }} * {{ type.length }});
    return *this;
}

{% endif %}

{%- if entry.presence != 'constant' and type.primitiveType == 'char' %}
{{ class_name }}& {{ method_name | format_method_name_get }}({{ value_type }} value) noexcept {
    std::size_t const lengthToCopy = std::min<std::size_t>(value.size(), {{ type.length }});
    std::memcpy(buffer_ + offset_ + {{ entry.offset }}, value.data(), lengthToCopy);
    for (std::size_t i = lengthToCopy; i < {{ type.length }}; ++i) {
        *std::bit_cast<{{ underlying_type }}*>(buffer_ + offset_ + {{ entry.offset }} + i) = {{ type.nullValue | replace_keyword }};
    }
    return *this;
}

{% endif %}

{%- if entry.presence == 'optional' %}
{{ class_name }}& {{ method_name | format_method_name_reset }}() noexcept {
    return {{ method_name | format_method_name_set }}({{ value_type }}());
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'constant' %}
[[nodiscard]] static constexpr bool {{ method_name | format_method_name_is_present }}() noexcept {
    return true;
}
{% endif %}

{%- if entry.presence == 'optional' %}
[[nodiscard]] bool {{ method_name | format_method_name_is_present }}() const noexcept {
    return {{ type.nullValue | cpp }} != {{ method_name | format_method_name_get }}().front();
}
{% endif %}
{% endmacro %}

{% macro generate_composite(class_name, entry) %}

{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}
{%- set composite_class_name = type.name | format_class_name -%}
{%- set method_name = entry.name -%}
{%- set composite_first_entry_method_name = type.containedTypes[0].name -%}

[[nodiscard]] {{ composite_class_name }} {{ method_name | format_method_name_get }}() {
    return {{ composite_class_name }}(buffer_, offset_ + {{ entry.offset }}, bufferLength_, actingVersion_);
}

[[nodiscard]] bool {{ method_name | format_method_name_is_present }}() {
    return {{ method_name | format_method_name_get }}().{{ composite_first_entry_method_name | format_method_name_is_present }}();
}
{% endmacro %}

{% macro generate_enum(class_name, entry) %}
{%- if entry.token == 'field' %}
    {%- set type = entry.type -%}
{%- else %}
    {%- set type = entry -%}
{%- endif %}
{%- if entry.valueRef != None %}
    {%- set const_value = entry.valueRef -%}
{%- else %}
    {%- set const_value = type.const_value -%}
{%- endif %}
{%- set enum_class_name = type.name | format_class_name -%}
{%- set method_name = entry.name -%}
{%- set underlying_type = type.encodingType | cpp -%}

{%- if entry.presence == 'constant' %}
[[nodiscard]] static constexpr {{ enum_class_name }} {{ method_name | format_method_name_get }}() noexcept {
    return {{ enum_class_name }}::{{ const_value.split('.')[1] }};
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'optional' %}
[[nodiscard]] {{ enum_class_name }} {{ method_name | format_method_name_get }}() const noexcept {
    return {{ enum_class_name }}(*std::bit_cast<{{ underlying_type }} const*>(buffer_ + offset_ + {{ entry.offset }}));
}

{% endif %}

{%- if entry.presence != 'constant' %}
{{ class_name }}& {{ method_name | format_method_name_get }}({{ enum_class_name }} value) noexcept {
    *std::bit_cast<{{ underlying_type }}*>(buffer_ + offset_ + {{ entry.offset }}) = static_cast<{{ underlying_type }}>(value);
    return *this;
}

{% endif %}

{%- if entry.presence == 'optional' %}
{{ class_name }}& {{ method_name | format_method_name_reset }}() noexcept {
    return {{ method_name | format_method_name_set }}({{ enum_class_name }}::NULL_VALUE);
}

{% endif %}

{%- if entry.presence == 'required' or entry.presence == 'constant' %}
[[nodiscard]] static constexpr bool {{ method_name | format_method_name_is_present }}() noexcept {
    return true;
}
{% endif %}

{%- if entry.presence == 'optional' %}
[[nodiscard]] bool {{ method_name | format_method_name_is_present }}() const noexcept {
    return {{ enum_class_name }}::NULL_VALUE != {{ method_name | format_method_name_get }}();
}
{% endif %}
{% endmacro %}

{% macro generate_set(class_name, entry) %}
{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}
{%- set set_class_name = entry.name | format_class_name -%}
{%- set method_name = entry.name -%}

[[nodiscard]] {{ set_class_name }} {{ method_name | format_method_name_get }}() {
    return {{ set_class_name }}(buffer_, offset_ + {{ entry.offset }}, bufferLength_, actingVersion_);
}
{% endmacro %}

{% macro generate_group(class_name, entry) %}
{% endmacro %}

{% macro generate_data(class_name, entry) %}
{% endmacro %}

{# ------------------------------------------------------------- #}


{% macro generate_Group(className, entry) %}
// group {{ entry.name }}
class {{ entry.name | className }} final {
private:
    char* buffer_ = nullptr;
    std::size_t bufferLength_ = 0;
    std::size_t initialPosition_ = 0;
    std::size_t* positionPtr_ = nullptr;
    std::size_t blockLength_ = 0;
    std::size_t count_ = 0;
    std::size_t index_ = 0;
    std::size_t offset_ = 0;
    std::uint16_t actingVersion_ = 0;

public:
    {{ entry.name | className}}& wrapForDecode(char* buffer, std::size_t* pos, std::uint16_t actingVersion, std::size_t bufferLength) {
        {{ entry.dimensionType.name | className }} dimension(buffer, *pos, bufferLength, actingVersion);
        buffer_ = buffer;
        bufferLength_ = bufferLength;
        blockLength_ = dimension.blockLength();
        count_ = dimension.numInGroup();
        index_ = 0;
        actingVersion_ = actingVersion;
        initialPosition_ = *pos;
        positionPtr_ = pos;
        *positionPtr_ += {{ entry.dimensionType.name }}::encodedLength();
        return *this;
    }

    {{ entry.name | className }}& wrapForEncode(char* buffer, std::size_t count, std::size_t* pos, std::uint16_t actingVersion,
            std::size_t bufferLength) {
        buffer_ = buffer;
        bufferLength_ = bufferLength;
        {{ entry.dimensionType.name | className }}(buffer, *pos, bufferLength, actingVersion)
            .blockLength(sbeBlockLength())
            .numInGroup(count)
        ;
        index_ = 0;
        count_ = count;
        blockLength_ = {{ entry.blockLength }};
        actingVersion_ = actingVersion;
        initialPosition_ = *pos;
        positionPtr_ = pos;
        *positionPtr_ += {{ entry.dimensionType.name }}::encodedLength();
        return *this;
    }

    [[nodiscard]] static constexpr std::size_t sbeBlockLength() noexcept {
        return {{ entry.blockLength }};
    }

    [[nodiscard]] std::size_t sbePosition() const noexcept {
        return *positionPtr_;
    }

    void sbePosition(std::size_t value) {
        *positionPtr_ = sbeCheckPosition(value);
    }

    std::size_t sbeCheckPosition(std::size_t position) {
        if (position > bufferLength_) [[unlikely]] {
            throw std::runtime_error("buffer too short ({{ entry.name | className }}) [E100]");
        }
        return position;
    }

    [[nodiscard]] std::size_t count() const noexcept {
        return count_;
    }

    [[nodiscard]] bool hasNext() const noexcept {
        return index_ < count_;
    }

    {{ entry.name | className }}& next() {
        if (index_ >= count_) [[unlikely]] {
            throw std::runtime_error("index >= count in group {{ entry.name | className }} [E108]");
        }
        offset_ = *positionPtr_;
        if ((offset_ + blockLength_) > bufferLength_) [[unlikely]] {
            throw std::runtime_error("buffer too short for next group index ({{ entry.name | className }}) [E108]");
        }
        *positionPtr_ = offset_ + blockLength_;
        ++index_;
        return *this;
    }

{% for field in entry.fields %}
    {{ generate(entry.name | className, field) | indent }}
{% endfor -%}

private:
    std::size_t* positionPtr() noexcept {
        return positionPtr_;
    }
};

{{ entry.name | className }} {{ entry.name | methodName_GET }}() {
    {{ entry.name | className }} group;
    group.wrapForDecode(buffer_, positionPtr(), actingVersion_, bufferLength_);
    return group;
}

{{ entry.name | className }} {{ entry.name | methodName_GET_COUNT }}(std::size_t count) {
    {{ entry.name | className }} group;
    group.wrapForEncode(buffer_, count, positionPtr(), actingVersion_, bufferLength_);
    return group;
}
{% endmacro %}

{# ------------------------------------------------------------- #}

{% macro generate_Data(className, entry) %}

{%- set methodName = entry.name %}
{%- set lengthType = (entry.type.containedTypes | selectattr('name', 'equalto', 'length') | first) %}
{%- set varDataType = (entry.type.containedTypes | selectattr('name', 'equalto', 'varData') | first) %}

{%- if varDataType.primitiveType == 'char' or varDataType.primitiveType == 'uint8' %}
    {% set typeName = 'char' | cpp %}
{%- else %}
    {% set typeName = varDataType.primitiveType | cpp %}
{%- endif %}

{%- if varDataType.primitiveType == 'char' or varDataType.primitiveType == 'uint8' %}
    {% set valueType = 'std::string_view' %}
{%- else %}
    {% set valueType = 'std::span<' ~ typeName ~ ' const>' %}
{%- endif -%}

[[nodiscard]] {{ valueType }} {{ methodName | methodName_GET }}() noexcept {
    auto const length = *std::bit_cast<{{ lengthType.primitiveType | cpp }} const*>(buffer_ + sbePosition());
    auto const begin = std::bit_cast<{{ typeName }} const*>(buffer_ + sbePosition() + sizeof(length));
    sbePosition(sbePosition() + sizeof(length) + length);
    return {{ valueType }}(begin, length);
}

[[nodiscard]] bool {{ methodName | methodName_IS_PRESENT }}() const noexcept {
    auto const length = *std::bit_cast<{{ lengthType.primitiveType | cpp }} const*>(buffer_ + sbePosition());
    return length > 0;
}

{{ className }}& {{ methodName | methodName_SET}}({{valueType}} value) {
    auto const lengthPosition = sbePosition();
    sbePosition(lengthPosition + sizeof({{ lengthType.primitiveType | cpp }}));
    *std::bit_cast<{{ lengthType.primitiveType | cpp }}*>(buffer_ + lengthPosition) = value.size();
    if (value.size() > 0) [[likely]] {
        auto const pos = sbePosition();
        auto const size = value.size() * sizeof({{ typeName }});
        sbePosition(pos + size);
        std::memcpy(buffer_ + pos, value.data(), size);
    }
    return *this;
}
{% endmacro %}
