{% macro define(class_name, fields) %}
[[nodiscard]] static constexpr std::size_t fieldsCount() noexcept { return {{ fields | length }}; }

template<std::size_t N>
[[nodiscard]] decltype(auto) operator[](std::integral_constant<std::size_t, N>) const noexcept {
  return this->template get<N>();
}

template<FixedString N>
[[nodiscard]] decltype(auto) operator[](Value<N>) const noexcept {
  return this->template get<N>();
}

template<std::size_t N>
[[nodiscard]] decltype(auto) get() const noexcept {
{% for field in fields %}
  if constexpr (N == {{ loop.index0 }}) {
    return {{ define_property(class_name, field) }};
  } else {{- '' -}}
{%- endfor %} {
    static_assert(N + 1 == 0, "invalid template argument");
  }
}

template<FixedString N>
[[nodiscard]] decltype(auto) get() const noexcept {
  using namespace std::string_view_literals;

{% for field in fields %}
  if constexpr (static_cast<std::string_view>(N) == "{{ field.name }}"sv) {
     return this->get<{{ loop.index0 }}>();
  } else {{- '' -}}
{%- endfor %} {
    static_assert(sizeof(N) + 1 == 0, "invalid template argument");
  }
}

{%- endmacro %}

{% macro define_property(class_name, entry) %}
{%- if entry.token == 'type' %}
    {{- define_property_type(class_name, entry) -}}
{%- elif entry.token == 'composite' %}
    {{- define_property_composite(class_name, entry) -}}
{%- elif entry.token == 'enum' %}
    {{- define_property_enum(class_name, entry) -}}
{%- elif entry.token == 'set' %}
    {{- define_property_set(class_name, entry) -}}
{%- elif entry.token == 'field' %}
    {%- if entry.type.token == 'type' %}
        {{- define_property_type(class_name, entry) -}}
    {%- elif entry.type.token == 'composite' %}
        {{- define_property_composite(class_name, entry) -}}
    {%- elif entry.type.token == 'enum' %}
        {{- define_property_enum(class_name, entry) -}}
    {%- elif entry.type.token == 'set' %}
        {{- define_property_set(class_name, entry) -}}
    {%- endif %}
{%- elif entry.token == 'group' %}
    {{- define_property_group(class_name, entry) -}}
{%- elif entry.token == 'data' %}
    {{- define_property_data(class_name, entry) -}}
{%- endif %}
{%- endmacro %}

{% macro escape_string(var) %}
"{{ var }}"
{%- endmacro %}

{% macro escape_char(var) %}
{%- if var | length == 1 %}
'{{ var }}'
{%- else %}
'{{ var | replace_keyword }}'
{%- endif %}
{%- endmacro %}

{% macro define_property_type(class_name, entry) -%}
{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}

{%- set Name = escape_string(entry.name) -%}
{%- set T = type.primitiveType | replace_keyword -%}
{%- set Length = "Length<" ~ type.length ~ ">" -%}

{%- if entry.presence == 'constant' %}
    {%- if type.primitiveType == 'char' %}
        {%- if type.length != 1 %}
            {% set CValue = "Value<FixedString(" ~ escape_string(type.constValue) ~ ")>" %}
        {%- else %}
            {% set CValue = "Value<" ~ escape_char(type.constValue) ~ ">" %}
        {%- endif %}
    {%- else %}
        {% set CValue = "Value<" ~ type.constValue ~ ">" %}
    {%- endif %}
ConstantField<{{ Name }}, {{ T }}, {{ Length }}, {{ CValue }}>()
{%- elif entry.presence == 'required' %}
RequiredField<{{ Name }}, {{ T }}, {{ Length }}>(buffer_, offset_ + {{ entry.offset }})
{%- else %}
    {%- if type.primitiveType == 'char' %}
        {% set Null = "Value<" ~ escape_char(type.nullValue) ~ ">" %}
    {%- else %}
        {% set Null = "Value<" ~ type.nullValue | replace_keyword ~ ">" %}
    {%- endif %}
OptionalField<{{ Name }}, {{ T }}, {{ Length }}, {{ Null }}>(buffer_, offset_ + {{ entry.offset }})
{%- endif %}
{%- endmacro %}

{% macro define_property_composite(class_name, entry) %}
{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}
{%- set composite_class_name = type.name | format_class_name -%}
WrapCompositeField<"{{ entry.name }}", {{ composite_class_name }}>(buffer_, offset_ + {{ entry.offset }}, bufferLength_, actingVersion_)
{%- endmacro %}

{% macro define_property_enum(class_name, entry) %}
{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}

{%- set Name = escape_string(entry.name) -%}
{%- set T = type.name | format_class_name -%}
{%- set Length = "Length<1>" -%}

{%- if entry.presence == 'constant' %}
    {%- if entry.valueRef != None %}
        {% set CValue = "Value<" ~ T ~ "::" ~ entry.valueRef.split('.')[1] ~ ">" %}
    {%- else %}
        {% set CValue = "Value<" ~ T ~ "::" ~ type.constValue.split('.')[1] ~ ">" %}
    {%- endif %}
ConstantField<{{ Name }}, {{ T }}, {{ Length }}, {{ CValue }}>()
{%- elif entry.presence == 'required' %}
RequiredField<{{ Name }}, {{ T }}, {{ Length }}>(buffer_, offset_ + {{ entry.offset }})
{%- else %}
    {% set Null = "Value<" ~ T ~ "::NULL_VALUE>" %}
OptionalField<{{ Name }}, {{ T }}, {{ Length }}, {{ Null }}>(buffer_, offset_ + {{ entry.offset }})
{%- endif %}
{%- endmacro %}

{% macro define_property_set(class_name, entry) %}
{%- if entry.token == 'field' %}
    {% set type = entry.type -%}
{%- else %}
    {% set type = entry -%}
{%- endif %}

{%- set Name = escape_string(entry.name) -%}
{%- set T = entry.name | format_class_name -%}
{%- set Length = "Length<1>" -%}
RequiredField<{{ Name }}, {{ T }}, {{ Length }}>(buffer_, offset_ + {{ entry.offset }})
{%- endmacro %}

{% macro define_property_group(class_name, entry) %}
{%- set group_class_name = entry.name | format_class_name -%}
WrapGroupField<"{{ entry.name }}", {{ group_class_name }}>(buffer_, const_cast<std::size_t*>(sbePositionPtr()), actingVersion_, bufferLength_)
{%- endmacro %}

{% macro define_property_group_init(class_name, entry) %}
{%- set group_class_name = entry.name | format_class_name -%}
{{ group_class_name }}(buffer_, count, const_cast<std::size_t*>(sbePositionPtr()), actingVersion_, bufferLength_)
{%- endmacro %}

{% macro define_property_data(class_name, entry) %}
{%- set type = entry.type -%}
{%- set length_type = (type.containedTypes | selectattr('name', 'equalto', 'length') | first) -%}
{%- set var_data_type = (type.containedTypes | selectattr('name', 'equalto', 'varData') | first) -%}
{%- set method_name = entry.name -%}
{%- set length_underlying_type = length_type.primitiveType | replace_keyword -%}
{%- set data_underlying_type = var_data_type.primitiveType | replace_keyword -%}

{%- if var_data_type.primitiveType == 'char' or var_data_type.primitiveType == 'uint8' %}
    {%- set data_underlying_type = 'char' -%}
    {%- set value_type = 'std::string_view' -%}
{%- else %}
    {%- set value_type = 'std::span<' ~ data_underlying_type ~ ' const>' -%}
{%- endif %}
Value<0>(/* TODO */)
{%- endmacro %}
