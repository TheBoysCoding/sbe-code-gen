{% extends 'document.tmpl' %}

{% block content %}
template<std::size_t N>
struct FixedString {
  char storage[N + 1] = {};

  constexpr FixedString(char const* str) noexcept {
    for (std::size_t i = 0; i != N; ++i) {
      storage[i] = str[i];
    }
  }

  [[nodiscard]] explicit constexpr operator std::string_view() const noexcept {
    return std::string_view(storage, N);
  }
};

template<std::size_t N>
FixedString(char const (&)[N]) -> FixedString<N - 1>;

template<std::size_t N>
struct FieldIdx : std::integral_constant<std::size_t, N> {};

template<FixedString N>
struct FieldName {
  using value_type = std::string_view;
  static constexpr auto value = static_cast<std::string_view>(N);

  [[nodiscard]] constexpr operator value_type() const noexcept {
    return value;
  }

  [[nodiscard]] constexpr value_type operator()() const noexcept {
    return value;
  }
};

namespace detail {

constexpr int toInt(char c) noexcept {
  return static_cast<int>(c) - static_cast<int>('0');
}

template<std::size_t N>
constexpr std::size_t parse(char const (&str)[N]) noexcept {
  std::size_t number = 0;
  std::size_t multiplier = 1;
  for (std::size_t i = 0; i < N; ++i) {
    char c = str[N - 1 - i];
    if (c != '\'') { // skip digit separators
      number += toInt(c) * multiplier;
      multiplier *= 10;
    }
  }
  return number;
}

} // namespace detail

inline namespace literals {
template<FixedString N>
constexpr auto operator""_name() noexcept {
  return FieldName<N>();
}

template<char... c>
constexpr auto operator"" _idx() {
  return FieldIdx<detail::parse<sizeof...(c)>({c...})>();
}

} // namespace literals

template<std::size_t N>
constexpr auto idx = FieldIdx<N>();

template<FixedString N>
constexpr auto name = FieldName<N>();

template<std::size_t N>
struct Length : std::integral_constant<std::size_t, N> {};

template<auto N>
struct Value {
  static constexpr auto value = N;
};

template<typename T, typename Length, class = void>
struct Type;
template<typename T>
struct Type<T, Length<1>> {
  using value_type = T;
  using underlying_type = T;
  using length_type = Length<1>;
};
template<std::size_t N>
struct Type<char, Length<N>, std::enable_if_t<(N != 1)>> {
  using value_type = std::string_view;
  using underlying_type = char;
  using length_type = Length<N>;
};
template<>
struct Type<std::uint8_t, Length<0>> : Type<char, Length<0>> {};

template<class T, class Length>
concept ArrayLike = (Length::value > 1);

template<class T, class Length>
concept StringLike = std::is_same_v<typename Type<T, Length>::value_type, std::string_view>;

template<class T, class Length>
concept SingleElementLike = (Length::value == 1);

template<class T>
concept isAggregate = requires {
  typename T::aggregate_type;
};

template<class T>
concept isSequence = requires {
  typename T::sequence_type;
};

template<FixedString Name, typename T, typename Length, typename CValue>
struct ConstantField {
  using value_type = typename Type<T, Length>::value_type;
  using underlying_type = typename Type<T, Length>::underlying_type;

  [[nodiscard]] static constexpr auto name() noexcept {
    return static_cast<std::string_view>(Name);
  }

  [[nodiscard]] static constexpr auto present() noexcept {
    return true;
  }

  [[nodiscard]] static constexpr auto value() noexcept {
    return static_cast<value_type>(CValue::value);
  }

  [[nodiscard]] constexpr operator value_type() const noexcept {
    return static_cast<value_type>(CValue::value);
  }
};

template<FixedString Name, typename T, typename Length>
class RequiredField {
private:
  char* buffer_ = nullptr;
  std::size_t offset_ = 0;

public:
  using value_type = typename Type<T, Length>::value_type;
  using underlying_type = typename Type<T, Length>::underlying_type;

  RequiredField() = default;

  RequiredField(char* buffer, std::size_t offset) noexcept : buffer_(buffer), offset_(offset) {}

  [[nodiscard]] static constexpr auto name() noexcept {
    return static_cast<std::string_view>(Name);
  }

  [[nodiscard]] static constexpr auto present() noexcept {
    return true;
  }

  [[nodiscard]] value_type value() const noexcept requires(SingleElementLike<T, Length>) {
    return value_type(*dataBeginPtr());
  }

  [[nodiscard]] value_type value() const noexcept requires(ArrayLike<T, Length> && !std::is_same_v<value_type, std::string_view>) {
    return value_type(dataBeginPtr(), Length::value);
  }

  [[nodiscard]] value_type value(bool trim = true) const noexcept requires(std::is_same_v<value_type, std::string_view>) {
    auto result = std::string_view (dataBeginPtr(), Length::value);
    if (trim) {
      if (auto found = result.find('\0'); found != result.npos) {
        result = result.substr(0, found);
      }
    }
    return result;
  }

  void value(value_type value) noexcept requires(SingleElementLike<T, Length>) {
    std::memcpy(this->dataBeginPtr(), &value, sizeof(value));
  }

  void value(value_type value) noexcept requires(ArrayLike<T, Length>) {
    std::memcpy(this->dataBeginPtr(), value.data(), Length::value * sizeof(underlying_type));
  }

  [[nodiscard]] constexpr operator value_type() const noexcept {
    if constexpr (SingleElementLike<T, Length>) {
      return value_type(*dataBeginPtr());
    } else if constexpr (ArrayLike<T, Length>) {
      return value_type(dataBeginPtr(), Length::value);
    } else {
      static_assert(sizeof(Name) + 1 == 0);
    }
  }

  RequiredField& operator=(value_type value) noexcept {
    if constexpr (SingleElementLike<T, Length>) {
      std::memcpy(this->dataBeginPtr(), &value, sizeof(value));
    } else if constexpr (ArrayLike<T, Length>) {
      std::memcpy(this->dataBeginPtr(), value.data(), Length::value * sizeof(underlying_type));
    } else {
      static_assert(sizeof(Name) + 1 == 0);
    }
    return *this;
  }

protected:
  [[nodiscard]] underlying_type const* dataBeginPtr() const noexcept {
    return std::bit_cast<underlying_type const*>(buffer_ + offset_);
  }

  [[nodiscard]] underlying_type* dataBeginPtr() noexcept {
    return std::bit_cast<underlying_type*>(buffer_ + offset_);
  }
};

template<FixedString Name, typename T, typename Length, typename Null>
class OptionalField : public RequiredField<Name, T, Length> {
public:
  using value_type = typename Type<T, Length>::value_type;
  using underlying_type = typename Type<T, Length>::underlying_type;

  using RequiredField<Name, T, Length>::RequiredField;

  [[nodiscard]] constexpr auto present() const noexcept {
    auto const value = *this->dataBeginPtr();
    if constexpr (std::is_floating_point_v<value_type> && std::isnan(Null::value)) {
      return std::isnan(value);
    } else {
      return value != Null::value;
    }
  }

  using RequiredField<Name, T, Length>::value;

  void value(std::nullptr_t) noexcept {
    auto const value = underlying_type(Null::value);
    std::memcpy(this->dataBeginPtr(), &value, sizeof(value));
  }

  OptionalField& operator=(std::nullptr_t) noexcept {
    auto const value = underlying_type(Null::value);
    std::memcpy(this->dataBeginPtr(), &value, sizeof(value));
    return *this;
  }

  OptionalField& operator=(value_type value) noexcept {
    RequiredField<Name, T, Length>::operator=(value);
    return *this;
  }
};

template<FixedString Name, class T>
struct WrapCompositeField : T {
  using T::T;

  [[nodiscard]] static constexpr auto name() noexcept {
    return static_cast<std::string_view>(Name);
  }

  [[nodiscard]] constexpr auto present() const noexcept {
    return this->operator[](idx<0>).present();
  }
};

template<FixedString Name, class T>
struct WrapGroupField : T {
  using T::T;

  [[nodiscard]] static constexpr auto name() noexcept {
    return static_cast<std::string_view>(Name);
  }
};

template<FixedString Name, class T>
class DataField {
private:
  char* buffer_ = nullptr;
  std::size_t bufferLength_ = 0;
  std::size_t initialPosition_ = 0;
  std::size_t* positionPtr_ = nullptr;
  std::uint16_t actingVersion_ = 0;

public:
  using length_type = typename decltype(std::declval<T>()["length"_name])::underlying_type;
  using underlying_type = typename decltype(std::declval<T>()["varData"_name])::underlying_type;
  using value_type = typename Type<underlying_type, Length<0>>::value_type;

  DataField() = default;

  DataField(char* buffer, std::size_t* pos, std::uint16_t actingVersion, std::size_t bufferLength) {
    buffer_ = buffer;
    bufferLength_ = bufferLength;
    initialPosition_ = *pos;
    positionPtr_ = pos;
    actingVersion_ = actingVersion;
    *positionPtr_ = *positionPtr_ + sizeof(length_type);
  }

  [[nodiscard]] static constexpr auto name() noexcept {
    return static_cast<std::string_view>(Name);
  }

  [[nodiscard]] auto present() const noexcept {
    return this->size() > 0;
  }

  [[nodiscard]] std::size_t size() const noexcept {
    return std::size_t(*this->lengthBeginPtr());
  }

  [[nodiscard]] value_type value() const {
    auto const size = this->size();
    auto result = value_type(dataBeginPtr(), size);
    const_cast<DataField&>(*this).sbePosition(initialPosition_ + sizeof(length_type) + size * sizeof(underlying_type));
    return result;
  }

  void value(value_type value) {
    auto const size = static_cast<length_type>(value.size());
    *this->lengthBeginPtr() = size;
    std::memcpy(dataBeginPtr(), value.data(), size * sizeof(underlying_type));
    sbePosition(initialPosition_ + sizeof(length_type) + size * sizeof(underlying_type));
  }

  void value(std::nullptr_t) {
    *this->lengthBeginPtr() = 0;
    sbePosition(initialPosition_ + sizeof(length_type));
  }

  std::size_t sbeCheckPosition(std::size_t position) const {
    if (position > bufferLength_) [[unlikely]] {
      throw std::runtime_error("buffer too short [E100]");
    }
    return position;
  }

  void sbePosition(std::size_t position) {
    *positionPtr_ = sbeCheckPosition(position);
  }

private:
  [[nodiscard]] length_type const* lengthBeginPtr() const noexcept {
    return std::bit_cast<length_type const*>(buffer_ + initialPosition_);
  }

  [[nodiscard]] length_type* lengthBeginPtr() noexcept {
    return std::bit_cast<length_type*>(buffer_ + initialPosition_);
  }

  [[nodiscard]] underlying_type const* dataBeginPtr() const noexcept {
    return std::bit_cast<underlying_type const*>(buffer_ + initialPosition_ + sizeof(length_type));
  }

  [[nodiscard]] underlying_type* dataBeginPtr() noexcept {
    return std::bit_cast<underlying_type*>(buffer_ + initialPosition_ + sizeof(length_type));
  }
};
{{ '' -}}
{% endblock %}
