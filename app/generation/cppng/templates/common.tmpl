{% extends 'document.tmpl' %}

{% block content %}
template <std::size_t N> struct FixedString {
  char storage[N + 1] = {};

  constexpr FixedString(char const *str) noexcept {
    for (std::size_t i = 0; i != N; ++i) {
      storage[i] = str[i];
    }
  }

  constexpr FixedString(std::string_view str) noexcept {
    for (std::size_t i = 0; i != N; ++i) {
      storage[i] = str[i];
    }
  }

  [[nodiscard]] explicit constexpr operator std::string_view() const noexcept { return std::string_view(storage, N); }

  [[nodiscard]] constexpr char const *c_str() const noexcept { return storage; }

  [[nodiscard]] static constexpr std::size_t size() noexcept { return N; }

  constexpr auto operator<=>(FixedString const &) const = default;
};

template <std::size_t N> FixedString(char const (&)[N])->FixedString<N - 1>;

struct Empty {
  struct non_valid_value {};
  static constexpr auto value = non_valid_value();
};

template <class T, std::size_t Length> struct Type { static_assert(sizeof(T) + 1 == 0, "type deduction not defined"); };
template <class T> struct Type<T, 1> {
  using value_type = T;
  using underlying_type = T;
  static constexpr auto length = std::size_t(1);
};
template <std::size_t Length> struct Type<char, Length> {
  using value_type = std::string_view;
  using underlying_type = char;
  static constexpr auto length = Length;
};
template <> struct Type<std::uint8_t, 0> : Type<char, 0> {};

template <typename T, std::size_t Length, typename MinValue = Empty, typename MaxValue = Empty,
          typename NullValue = Empty, typename ConstValue = Empty>
struct TypeDescription {
  using value_type = typename Type<T, Length>::value_type;
  using underlying_type = typename Type<T, Length>::underlying_type;

  static constexpr auto length = Length;
  static constexpr auto min = MinValue::value;
  static constexpr auto max = MaxValue::value;
  static constexpr auto null = NullValue::value;
  static constexpr auto cvalue = ConstValue::value;
};

template <typename T, std::size_t Length, typename MinValue = Empty, typename MaxValue = Empty,
          typename NullValue = Empty, typename ConstValue = Empty, class = void>
struct TypeDescriptionBuilder {
  using type = TypeDescription<T, Length, MinValue, MaxValue, NullValue, ConstValue>;
  using underlying_type = typename Type<T, Length>::underlying_type;

  template <underlying_type Value> struct Storage { static constexpr auto value = Value; };

  template <underlying_type Value>
  using WithMinValue = TypeDescriptionBuilder<T, Length, Storage<Value>, MaxValue, NullValue, ConstValue>;
  template <underlying_type Value>
  using WithMaxValue = TypeDescriptionBuilder<T, Length, MinValue, Storage<Value>, NullValue, ConstValue>;
  template <underlying_type Value>
  using WithNullValue = TypeDescriptionBuilder<T, Length, MinValue, MaxValue, Storage<Value>, ConstValue>;
  template <underlying_type Value>
  using WithConstValue = TypeDescriptionBuilder<T, Length, MinValue, MaxValue, NullValue, Storage<Value>>;
};

template <typename T, std::size_t Length, typename MinValue, typename MaxValue, typename NullValue, typename ConstValue>
struct TypeDescriptionBuilder<
    T, Length, MinValue, MaxValue, NullValue, ConstValue,
    std::enable_if_t<std::is_same_v<typename Type<T, Length>::value_type, std::string_view>>> {
  using type = TypeDescription<T, Length, MinValue, MaxValue, NullValue, ConstValue>;
  using underlying_type = typename Type<T, Length>::underlying_type;

  template <underlying_type Value> struct Storage { static constexpr auto value = Value; };
  template <FixedString N> struct StringStorage { static constexpr auto value = static_cast<std::string_view>(N); };

  template <underlying_type Value>
  using WithMinValue = TypeDescriptionBuilder<T, Length, Storage<Value>, MaxValue, NullValue, ConstValue>;
  template <underlying_type Value>
  using WithMaxValue = TypeDescriptionBuilder<T, Length, MinValue, Storage<Value>, NullValue, ConstValue>;
  template <underlying_type Value>
  using WithNullValue = TypeDescriptionBuilder<T, Length, MinValue, MaxValue, Storage<Value>, ConstValue>;
  template <FixedString Value>
  using WithConstValue = TypeDescriptionBuilder<T, Length, MinValue, MaxValue, NullValue, StringStorage<Value>>;
};

{{ '' -}}
{% endblock %}
