{% macro define(class_name, fields) %}
// need a good interface for meta
{% endmacro %}

{% macro define0(class_name, fields) %}
[[nodiscard]] friend constexpr std::size_t propertiesCount({{ class_name }} const&) noexcept {
    return {{ fields | length }};
}

template<std::size_t N>
[[nodiscard]] friend constexpr std::string_view propertyName({{ class_name }} const&) noexcept {
    using namespace std::string_view_literals;
{% for entry in fields %}
    {% if loop.first %}{{ '    ' }}{% endif -%}
    if constexpr (N == {{ loop.index0 }}) {
        return "{{ entry.name }}"sv;
    } else{{ ' ' }}
{%- endfor %}
{
        static_assert(N + 1 == 0, "invalid argument");
    }
}

template<std::size_t N>
[[nodiscard]] friend decltype(auto) property({{ class_name }} entry) {
{% for entry in fields %}
    {%- if entry.token == 'field' %}
        {% set type = entry.type -%}
    {%- else %}
        {% set type = entry -%}
    {%- endif %}

    {%- if type.token != 'type' or type.length != 0 -%}
    {% if loop.first %}{{ '    ' }}{% endif -%}
    if constexpr (N == {{ loop.index0 }}) {
        return entry.{{ entry.name | format_method_name_get }}();
    } else{{ ' ' }}
    {%- endif %}
{% endfor %}
{
        static_assert(N + 1 == 0, "invalid argument");
    }
}

template<FixedString Name>
[[nodiscard]] friend decltype(auto) property({{ class_name }} entry) {
    using namespace std::string_view_literals;
{% for entry in fields %}
    {%- if entry.token == 'field' %}
        {% set type = entry.type -%}
    {%- else %}
        {% set type = entry -%}
    {%- endif %}

    {%- if type.token != 'type' or type.length != 0 -%}
    {% if loop.first %}{{ '    ' }}{% endif -%}
    if constexpr (Name == "{{ entry.name }}"sv) {
        return entry.{{ entry.name | format_method_name_get }}();
    } else{{ ' ' }}
    {%- endif %}
{% endfor %}
{
        static_assert(sizeof(Name) + 1 == 0, "invalid argument");
    }
}
{% endmacro %}
